{"version":3,"sources":["hoc/aux.js","hoc/conditional.js","components/textInput.js","components/selectInput.js","components/checkInput.js","containers/pages/createAccount.js","containers/main.js","App.js","serviceWorker.js","index.js"],"names":["aux","props","children","conditional","if","TextInput","react_default","a","createElement","className","clName","htmlFor","id","type","name","onChange","changed","SelectInput","selectOptions","map","list","key","val","toLowerCase","value","CheckInput","checkOptions","hoc_aux","CreateAccount","state","form","email","valid","erClass","password","colour","animal","chStat","tiger_type","showTgType","formIsValid","resetErrorInfo","curEstat","Object","objectSpread","_this","cls","setState","inputChangedHandler","event","changedVal","target","chName","getAttribute","test","length","trim","chChecked","checked","defArray","includes","push","index","indexOf","splice","checkValidity","formOverallValidity","ele","submitBtnHandler","e","preventDefault","method","action","textInput","this","selectInput","checkInput","hoc_conditional","onClick","Component","main","_ref","location","createAccount","App","BrowserRouter","containers_main","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f2d2ac6c.chunk.js","sourcesContent":["const aux = (props) => props.children;\n\nexport default aux;","const conditional = (props) => {\n    return(\n      !!props.if && props.children\n    );\n  }\n  \nexport default conditional;","import React from 'react';\n/* Function component to handle Input Text Render*/\nconst TextInput = (props) => {\n    return(\n        <div className ={props.clName}>\n            <label className='label' htmlFor={props.id}>\n                {props.children}\n            </label>\n            <input type={props.type} id={props.id} name={props.id} onChange={props.changed}/>\n        </div>\n    )\n}\n\nexport default TextInput;","import React from 'react';\n/* Function component to handle Select Dropdown List Render*/\nconst SelectInput = (props) => {\n\n    function renderOptions(list,key) {\n        let val = ''\n        if(key!==0){\n            val = list.toLowerCase();\n        }\n        return (\n            <option key= {key} value={val}>{list}</option>\n        );\n    }\n\n    return(\n        <div>\n            <div className ={props.clName}>\n                <label className='label' htmlFor='colour'>\n                    Colour\n                </label>\n                <select name={props.id} id={props.id} onChange={props.changed}>\n                    {props.selectOptions.map(renderOptions)}\n                </select>\n            </div>\n        </div>\n    )\n}\n\nexport default SelectInput;","import React from 'react';\nimport Aux from '../hoc/aux'\n/* Function component to handle Check Button Render*/\nconst CheckInput = (props) => {\n\n    function renderInputs(list,key) {\n        let val= list.toLowerCase();\n        return (\n           <Aux key= {key}>\n            <input onChange={props.changed} type='checkbox' name={props.id} value={val} id={val}/>\n            <label   htmlFor={val}>\n                {list}\n            </label>\n           </Aux>\n        );\n    }\n\n    return(\n        <div>\n            <div className ={props.clName}>\n                <span className=\"label\">\n                    Animal\n                </span>\n                {props.checkOptions.map(renderInputs)}\n            </div>\n        </div>\n    )\n}\n\nexport default CheckInput;","import React, {Component}from 'react';\nimport Aux from '../../hoc/aux'\n\n/* Condition Imports*/\nimport Conditional from '../../hoc/conditional'\n/*Components Import*/\nimport InputComp from '../../components/textInput'\nimport SelectComp from '../../components/selectInput'\nimport CheckComp from '../../components/checkInput';\n\n\nclass CreateAccount extends Component{\n /* State to store Input element Valid state and error class*/\n    state ={\n        form:{\n            email:{id:'email', valid:false, erClass:\"\"},\n            password:{id:'password', valid:false, erClass:\"\"},\n            colour:{id:'colour', valid:false, erClass:\"\"},\n            animal:{\n                id:'animal', \n                valid:false, \n                erClass:\"\",\n                chStat:[]\n            },\n            tiger_type:{id:'tiger_type', valid:true, erClass:\"\"},\n        },\n        showTgType:false,\n        formIsValid:false\n    }\n    /* Function to reset Error*/\n    resetErrorInfo = () =>{\n         /*Immutable State*/\n         const curEstat = {...this.state.form};\n         for(let cls in curEstat){\n            /*reset the eror class to null */\n            curEstat[cls].erClass = \"\";\n         }\n         this.setState({formIsValid:false,form:curEstat});\n    }\n    /* Function to Validate and update .valid property of state element*/\n    inputChangedHandler = (event) =>{\n        /* reset error class so only when they click submit they see errors*/\n        this.resetErrorInfo();\n\n        const curEstat = {...this.state.form};\n        let changedVal = event.target.value;\n        let chName = event.target.getAttribute('name');\n        /* For Email Validation*/\n        if(chName ==='email'){\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            curEstat[chName].valid = pattern.test(changedVal) \n        }\n         /* For Password Validation*/\n        if(chName === 'password' ){\n            curEstat[chName].valid = changedVal.length >=8 && changedVal.trim()!==\"\" ? true:false; \n        }\n         /* For Colour Validation*/\n        if(chName === 'colour' ){\n            curEstat[chName].valid = changedVal !==\"\" ? true:false; \n        }\n         /* For Tiger Type Validation*/\n        if(chName === 'tiger_type' ){\n            curEstat[chName].valid = changedVal.trim()!==\"\" ? true:false; \n        }\n         /* For Animal Validation*/\n        if(chName === 'animal' ){\n            let chChecked = event.target.checked;\n            let defArray = curEstat[chName].chStat\n            if(changedVal === \"tiger\"){\n                this.setState({showTgType:chChecked})\n                curEstat[\"tiger_type\"].valid = !chChecked\n            }\n            if(chChecked){\n                if(!defArray.includes(changedVal)) defArray.push(changedVal)\n            }else{\n                var index = defArray.indexOf(changedVal);\n                if (index > -1) defArray.splice(index, 1);\n            }\n            curEstat[chName].valid = defArray.length >=2;\n        }\n        \n        this.setState({form:curEstat})\n\n        \n    }\n\n    checkValidity = () => {\n        /*Immutable State*/\n        const curEstat = {...this.state.form};\n        /* Form Complete Info*/\n        let formOverallValidity = true;\n       \n        /* iterate among elements to get the class based on valid*/\n        for(let ele in curEstat){\n            formOverallValidity = curEstat[ele].valid && formOverallValidity\n            curEstat[ele].erClass = curEstat[ele].valid ? \"\":\"error\";\n        }\n        this.setState({form:curEstat,formIsValid:formOverallValidity});\n       \n    }\n    /*Function to Handle Submit*/\n    submitBtnHandler = (e) => {\n        e.preventDefault();\n        this.checkValidity();\n     }\n\n    render(){\n        let selOptionsList = ['Choose colour','Blue','Green','Red','Black','Brown'];\n        let checkOptionsList = ['Bear','Tiger','Snake','Donkey']\n        return(\n            \n            <Aux>\n            <form method='post' action=''>\n                <h1>Fill out this awesome form</h1>\n                <fieldset>\n                    <h3>Your details</h3>\n                    <InputComp clName= {this.state.form.email.erClass} id={this.state.form.email.id} type=\"text\" changed={this.inputChangedHandler}>Email</InputComp>\n                    <InputComp clName={this.state.form.password.erClass} id={this.state.form.password.id} type=\"password\" changed={this.inputChangedHandler}>Password</InputComp>\n                   \n                </fieldset>\n\n                <fieldset>\n                    <h3>Your animal</h3>\n                    <SelectComp clName= {this.state.form.colour.erClass} id={this.state.form.colour.id} selectOptions={selOptionsList} changed={this.inputChangedHandler}/>\n                    <CheckComp clName= {this.state.form.animal.erClass} id={this.state.form.animal.id} checkOptions={checkOptionsList} changed={this.inputChangedHandler}/>\n                    <Conditional if={this.state.showTgType}>\n                        <InputComp clName= {this.state.form.tiger_type.erClass} id={this.state.form.tiger_type.id} type=\"text\" changed={this.inputChangedHandler}>Type of tiger</InputComp>\n                    </Conditional>\n                   \n                   \n                </fieldset>\n                <fieldset>\n                    <div>\n                        <button className=\"submitButton\" onClick={this.submitBtnHandler}>Create account</button>\n                    </div>\n                    <Conditional if={this.state.formIsValid}>\n                       <p className=\"completeInfo\">Well Done Your form is complete!!!</p>\n                    </Conditional>   \n                </fieldset>\n            </form>\n\n            </Aux>\n            \n        )\n\n    }\n    \n}\n\n\n\n  \n  export default CreateAccount; ","import '../scss/main.scss'\nimport React from 'react';\nimport Aux from '../hoc/aux'\nimport CreateAccount from './pages/createAccount';\n\n\n\nconst main = ({ location }) => (\n   \n    <Aux>\n         <CreateAccount/>\n    </Aux>\n)\n\nexport default main;\n","import React, { Component } from 'react';\nimport Main from './containers/main'\nimport{BrowserRouter} from 'react-router-dom'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Main></Main>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}